// <auto-generated />
using System;
using ForzaTelemetryServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForzaTelemetryServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250114204813_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ForzaTelemetryServer.Models.TrackedRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TrackedRoutes");
                });

            modelBuilder.Entity("ForzaTelemetryServer.Models.TrackedRoutePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Accelerator")
                        .HasColumnType("float");

                    b.Property<float>("Brake")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<float>("CurrentEngineRpm")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("EngineMaxRpm")
                        .HasColumnType("float");

                    b.Property<double>("GForceValue")
                        .HasColumnType("double");

                    b.Property<string>("GForceVector")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("Gear")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsRaceOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<float>("Power")
                        .HasColumnType("float");

                    b.Property<float>("Speed")
                        .HasColumnType("float");

                    b.Property<int>("Steer")
                        .HasColumnType("int");

                    b.Property<uint>("TimestampMS")
                        .HasColumnType("int unsigned");

                    b.Property<float>("TireSlipAngleFrontLeft")
                        .HasColumnType("float");

                    b.Property<float>("TireSlipAngleFrontRight")
                        .HasColumnType("float");

                    b.Property<float>("TireSlipAngleRearLeft")
                        .HasColumnType("float");

                    b.Property<float>("TireSlipAngleRearRight")
                        .HasColumnType("float");

                    b.Property<float>("TireTempFl")
                        .HasColumnType("float");

                    b.Property<float>("TireTempFr")
                        .HasColumnType("float");

                    b.Property<float>("TireTempRl")
                        .HasColumnType("float");

                    b.Property<float>("TireTempRr")
                        .HasColumnType("float");

                    b.Property<float>("Torque")
                        .HasColumnType("float");

                    b.Property<int>("TrackedRouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TrackedRouteId");

                    b.ToTable("TrackedRoutePoints");
                });

            modelBuilder.Entity("ForzaTelemetryServer.Models.TrackedRoutePoint", b =>
                {
                    b.HasOne("ForzaTelemetryServer.Models.TrackedRoute", null)
                        .WithMany("TrackedRoutePoints")
                        .HasForeignKey("TrackedRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForzaTelemetryServer.Models.TrackedRoute", b =>
                {
                    b.Navigation("TrackedRoutePoints");
                });
#pragma warning restore 612, 618
        }
    }
}
